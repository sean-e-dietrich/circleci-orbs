version: 2.1

orbs:
  orb-tools: circleci/orb-tools@9.0.0
  extract:
    orbs:
      orb-tools: circleci/orb-tools@9.0.0
    jobs:
      new:
        parameters:
          orb:
            description: "The orb to extract"
            type: string
        executor: orb-tools/alpine
        steps:
          - checkout
          - run:
              name: Install Curl
              command: apk add wget
          - run:
              name: Install YQ
              command: |
                wget -O /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/3.1.2/yq_linux_amd64"
                chmod 755 /usr/local/bin/yq
          - run:
              name: Extract Orb
              command: |
                mkdir .circleci/extract-inline-orb || true
                yq r .circleci/config.yml orbs.<<parameters.orb>> > .circleci/extract-inline-orb/<<parameters.orb>>.yml
          - persist_to_workspace:
              paths:
                - .circleci/extract-inline-orb/<<parameters.orb>>.yml
              root: .
          - run:
              name: Displact Extracted Orb
              command: cat "<<parameters.orb>>.yml"
      inline:
        parameters:
          orb:
            description: "The orb to extract"
            type: string
        docker:
          - image: circleci/ruby:buster
        working_directory: /tmp/project
        steps:
          - checkout
          - orb-tools/extract-inline-orb:
              orb: <<parameters.orb>>
              source: /tmp/project/.circleci/config.yml
              file: .circleci/extract-inline-orb/<<parameters.orb>>.yml
  phpcs:
    description: >
      Run PHP Code Sniffer Tests on code to test if there are issues.
    jobs:
      drupal:
        executor: phpcs_executor
        steps:
          - install_phpcs
      wordpress:
        executor: phpcs_executor
        steps:
          - install_phpcs
    commands:
      install_phpcs:
        steps:
          - run:
              name: Install Packages
              command: |
                # Add composer bin directory to PATH
                echo -e "\n"'export PATH="$PATH:$HOME/.composer/vendor/bin"' >> $BASH_ENV; \
                source $BASH_ENV; \
                # Drupal Coder & WP Coding Standards w/ a matching version of PHP_CodeSniffer
                composer global require drupal/coder wp-coding-standards/wpcs phpcompatibility/phpcompatibility-wp >/dev/null; \
                phpcs --config-set installed_paths $HOME/.composer/vendor/drupal/coder/coder_sniffer/,\
                $HOME/.composer/vendor/wp-coding-standards/wpcs/,\
                $HOME/.composer/vendor/phpcompatibility/php-compatibility/PHPCompatibility/,\
                $HOME/.composer/vendor/phpcompatibility/phpcompatibility-wp/PHPCompatibilityWP,\
                $HOME/.composer/vendor/phpcompatibility/phpcompatibility-paragonie/PHPCompatibilityParagonieRandomCompat;
          - run:
              name: Validate PHPCS Installed
              command: phpcs -i && phpcs --config-show
      check_code:
        parameters:
          project:
            description: "The type of project being checked. Currently only Drupal and WordPress are supported."
            type: enum
            default: "none"
            enum: ["wordpress", "drupal", "none"]
          standards:
            description: "What are the standards that should be checked or what is the path to the PHPCS configuration file to use."
            type: string
            default: ""
          extensions:
            description: "What file extensions should be checked."
            type: string
            default: ""
          location:
            description: "What directory or file should be checked."
            type: string
            default: ""
          arguments:
            description: "The arguments to use to instead of the defaults."
            type: string
            default: ""
        steps:
          - run:
              name: Execute PHPCS
              command: |
                CODING_STANDARDS=""
                FILE_EXTENSION=""

                case "<<parameters.project>>" in
                  drupal)
                    CODING_STANDARDS="Drupal,DrupalPractice"
                    FILE_EXTENSION="php,module,inc,install,test,profile,theme,css,info,txt,md"
                    ;;
                  wordpress)
                    CODING_STANDARDS="WordPress,WordPress-Extra,WordPress-Core"
                    FILE_EXTENSION="php"
                    ;;
                esac

                if [[ "${CODING_STANDARDS}" != "" ]]; then
                  phpcs --standard="${CODING_STANDARDS}" <<parameters.location>>
                fi
    executors:
      phpcs_executor:
        docker:
          - image: circleci/php:7.2-cli-buster

all-filters: &all-filters
  tags:
    only: /.*/
  branches:
    only: /.*/

dev-filters: &dev-filters
  tags:
    ignore: /.*/
  branches:
    only: /.*/

prod-filters: &prod-filters
  tags:
    only: /.*/
  branches:
    ignore: /.*/

workflows:
  version: 2.1
  test-phpcs:
    jobs:
      - orb-tools/lint:
          filters: *all-filters

      # PHPCS
      - phpcs/drupal:
          requires: [orb-tools/lint]
          filters: *all-filters
      - phpcs/wordpress:
          requires: [orb-tools/lint]
          filters: *all-filters
      - extract/new:
          name: extract_inline_phpcs
          requires: [phpcs/drupal, phpcs/wordpress]
          filters: *all-filters
          orb: phpcs
      - orb-tools/pack:
          requires: [extract_inline_phpcs]
          filters: *all-filters
          attach-workspace: true
          source-dir: .circleci/extract-inline-orb/
      - orb-tools/publish-dev:
          requires: [orb-tools/pack]
          orb-name: sean-e-dietrich/phpcs
          orb-path: .circleci/extract-inline-orb/orb.yml
          filters: *dev-filters
      - orb-tools/publish:
          requires: [orb-tools/pack]
          filters: *prod-filters
          orb-ref: sean-e-dietrich/phpcs@${CIRCLE_TAG}
          attach-workspace: true
